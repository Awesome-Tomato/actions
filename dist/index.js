(()=>{"use strict";var e={n:n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return e.d(r,{a:r}),r},d:(n,r)=>{for(var t in r)e.o(r,t)&&!e.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:r[t]})},o:(e,n)=>Object.prototype.hasOwnProperty.call(e,n)};const n=require("node:path");var r=e.n(n);const t=require("node:fs");var a=e.n(t);function o(e){const n=n=>r().resolve(e,n);return a().readdirSync(e).filter((e=>c(n(e)))).map(n)}function c(e){try{return a().lstatSync(e).isDirectory()}catch(e){return!1}}const i=require("node:child_process");var l=e.n(i);function s(e){try{const n=r().resolve(e,"package.json"),t=a().readFileSync(n).toString();return JSON.parse(t)}catch(e){return null}}function u(e){const{readme:n,fullpath:t}=function(e){const n=r().resolve(e,"readme.md");let t;try{t=a().readFileSync(n).toString()}catch(e){return{}}return{fullpath:n,readme:t}}(e);if(!t)return;const c=o(e).map((e=>({fullpath:e,packageJson:s(e)})));c.filter((e=>e.packageJson)).map((e=>(function(e){l().execSync(`npm --prefix="${e}" ci`),l().execSync(`npm --prefix="${e}" run build`)}(e.fullpath),e))).filter((e=>!1!==e.packageJson.deploy)).forEach((e=>function(e){const n=["build",".next","dist"],t=a().readdirSync(e).find((e=>n.includes(e)));l().execSync(`mv ${r().resolve(e,t,"*")} ${e}`)}(e.fullpath)));const i=c.filter((({packageJson:e})=>!1!==e?.deploy)).map((e=>r().basename(e.fullpath))),u=`https://awesome-tomato.github.io/CodeReview/${r().basename(e)}`,p="\n"+i.map((e=>`- [${e}](${u}/${e}/index.html)`)).join("\n")+"\n\n";var d,f;d=t,f=n.replace(/(?<=## 배포링크(\n|\r\n))(\n|\r\n)((- .+(\n|\r\n))*)/,p),a().writeFileSync(d,f)}o(r().resolve(__dirname,"./")).filter(c).forEach(u)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,